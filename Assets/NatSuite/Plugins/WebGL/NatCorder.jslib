const WebCorder={$sharedInstance:[],NCCreateWEBMRecorder:function(e,t,n,r,a,o,i,c){const d=document.createElement("canvas");d.width=e,d.height=t;const s=d.getContext("2d"),f=s.getImageData(0,0,e,t),u=d.captureStream(n).getVideoTracks()[0],l=a>0&&o>0,m=l?new AudioContext({latencyHint:"interactive",sampleRate:a}):void 0,C=m&&m.createMediaStreamDestination({channelCount:o,channelCountMode:"explicit"}),h=C&&C.stream.getAudioTracks()[0],g=l?[u,h]:[u],b={mimeType:sharedInstance.MIME_TYPE,videoBitsPerSecond:r},p=new MediaRecorder(new MediaStream(g),b);p.ondataavailable=function(e){const t=new Blob([e.data],{type:"video/webm"}),n=URL.createObjectURL(t);console.log("WebCorder: Completed recording video",t,"to URL:",n);const r=lengthBytesUTF8(n)+1,a=_malloc(r);stringToUTF8(n,a,r),Runtime.dynCall("vii",i,[c,a]),_free(a)},p.start(),console.log("WebCorder: Starting recording");const v={recorder:p,frameBuffer:d,frameBufferContext:s,pixelBuffer:f,audioContext:m,audioStream:C};return sharedInstance.push(v)-1},NCFrameSize:function(e,t,n){sharedInstance[e]},NCCommitFrame:function(e,t,n){const r=sharedInstance[e],a=r.frameBufferContext,o=r.pixelBuffer;for(var i=4*o.width,c=0;c<o.height;c++){const e=new Uint8Array(HEAPU8.buffer,t+(o.height-c-1)*i,i);o.data.set(e,c*i)}a.putImageData(o,0,0)},NCCommitSamples:function(e,t,n,r){const a=sharedInstance[e],o=a.audioContext,i=a.audioStream,c=o.createBuffer(void 0,n/void 0,void 0),d=new Float32Array(HEAPU8.buffer,t,n);for(var s=0;s<c.numberOfChannels;s++){const e=c.getChannelData(s);for(var f=0;f<c.length;f++)e[f]=d[f*c.numberOfChannels+s]}var u=o.createBufferSource();u.buffer=c,u.connect(i),u.start()},NCFinishWriting:function(e){const t=sharedInstance[e],n=t.recorder,r=t.audioContext;console.log("WebCorder: Stopping recording"),n.stop(),r&&r.close()}};autoAddDeps(WebCorder,"$sharedInstance"),mergeInto(LibraryManager.library,WebCorder);